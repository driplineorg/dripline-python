name: Publish

on:
  push:
    branches: [ main, develop ]
    tags: ['*']
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REGISTRY_OLD: docker.io
  BASE_IMAGE_USER: ghcr.io/driplineorg
  BASE_IMAGE_REPO: dripline-cpp
  BASE_IMAGE_TAG: 'v2.9.0'

jobs:

  test_docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        run: |
          pwd
          docker build \
            --build-arg img_user=${{ env.BASE_IMAGE_USER }} \
            --build-arg img_repo=${{ env.BASE_IMAGE_REPO }} \
            --build-arg img_tag=${{ env.BASE_IMAGE_TAG }} \
            -t ${{ env.BASE_IMAGE_USER }}/${{ github.repository }}:gha-test \
            .
          cd tests/integration
          docker build \
            --build-arg img_user=${{ env.BASE_IMAGE_USER }} \
            --build-arg img_repo=${{ github.repository }} \
            --build-arg img_tage=gha-int-test
      - name: Unit Tests
        run: |
          docker run --rm ${{ env.BASE_IMAGE_USER }}/${{ github.repository }}:gha-int-test bash -c "
            cd /usr/local/src_py/tests
            pytest"
      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v3
      #- name: Set up Docker Buildx
      #  id: setup_buildx
      #  uses: docker/setup-buildx-action@v3
      #  with:
      #    driver: docker
      #- name: Build
      #  id: build
      #  uses: docker/build-push-action@v5
      #  with:
      #    context: .
      #    push: false
      #    load: true
      #    build-args: |
      #      img_user=${{ env.BASE_IMAGE_USER }}
      #      img_repo=${{ env.BASE_IMAGE_REPO }}
      #      img_tag=${{ env.BASE_IMAGE_TAG }}
      #    platforms: linux/amd64
#          cache-from: type=gha
#          cache-to: type=gha,mode=max
      #    tags: ${{ env.BASE_IMAGE_USER }}/${{ github.repository }}:gha-test
      #- name: Unit Tests
      #  run: |
      #    docker run --rm ${{ env.BASE_IMAGE_USER }}/${{ github.repository }}:gha-test bash -c "
      #      cd /usr/local/src_py/tests
      #      pytest"
      #- name: Build Integration Tests
      #  id: build_int_tests
      #  uses: docker/build-push-action@v5
      #  with:
      #    context: ./tests/integration
      #    push: false
      #    load: true
      #    build-args: |
      #      img_user=${{ env.BASE_IMAGE_USER }}
      #      img_repo=${{ github.repository }}
      #      img_tag=gha-int-test
      #    platforms: linux/amd64
#          cache-from: type=gha
#          cache-to: type=gha,mode=max
      #    tags: ${{ env.BASE_IMAGE_USER }}/${{ github.repository }}:gha-int-test
      #- name: Integration Tests
      #  run: |
      #    cd tests/integration
      #    ./do-testing.sh gha-int-test
        
# For debugging
      - name: Setup tmate session
        if: ${{ ! success() }}
        uses: mxschmitt/action-tmate@v3

  build_and_push:

    runs-on: ubuntu-latest

    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.draft == false)

    needs: [test_docker]

    strategy:
      matrix:
        build: [dev, release]
        include:
          - build: dev
            tag-suffix: '-dev'
          - build: release
            tag-suffix: ''

    steps:

      - name: Checkout the repo 
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_OLD }}/driplineorg/dripline-python
            ${{ env.REGISTRY }}/driplineorg/dripline-python
          flavor: |
            latest=auto
            suffix=${{ matrix.tag-suffix }},onlatest=true
          tags: |
            type=semver,pattern={{raw}}
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads{0}', 'main') }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: setup_buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_OLD }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build_push
        uses: docker/build-push-action@v5
        env:
          BASE_IMAGE_TAG: ${{ env.BASE_IMAGE_VER }}${{ matrix.tag-suffix }}
        with:
          context: .
          push: ${{ github.event_name == 'push' }}  # limited to develop, main, and tags; don't push on PR
          build-args: | 
            img_user=${{ env.BASE_IMAGE_USER }}
            img_repo=${{ env.BASE_IMAGE_REPO }}
            img_tag=${{ env.BASE_IMAGE_TAG }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64

      - name: Release
        uses: softprops/action-gh-release@v1
        if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
