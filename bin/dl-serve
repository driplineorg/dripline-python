#!/usr/bin/env python

import traceback

import dripline

import scarab

import logging
logger = logging.getLogger('dripline')
logger.setLevel(logging.DEBUG)

class Serve(dripline.core.ObjectCreator):
    '''
    Service launcher class

    This class is responsible for launching a Service based on a scarab.main_app.
    '''

    def __init__(self):
        super(Serve, self).__init__()

        self.return_code = 0

        self.handler = logging.StreamHandler()
        self.handler.setLevel(logging.WARNING)
        logger.addHandler(self.handler)
        time_format = '%Y-%m-%dT%H:%M:%S.%fZ'
        base_format = '%(asctime)s{}[%(levelname)-8s] %(name)s(%(lineno)d) -> {}%(message)s'
        self._logging_format = None
        try:
            import colorlog
            modified_format = base_format.format('%(log_color)s', '%(purple)s')
            self._logging_format = colorlog.ColoredFormatter(modified_format, datefmt=time_format[:-4])
        except ImportError:
            modified_format = base_format.format(' ', '')
            self._logging_format = logging.Formatter(modified_format, time_format[:-4])
        self.handler.setFormatter(self._logging_format)


    def run(self, the_app):
        try:
            self._run(the_app)
        except:
            logger.error("Caught an exception while running the service")
            logger.error("Traceback was:\n{}".format(traceback.format_exc()))
            logger.error("Exiting service")
            self.return_code = 100

    def _run(self, the_app):
        this_config_param = the_app.primary_config
        this_auth = the_app.auth

        verbosity = the_app.global_verbosity
        #print(f"verbosity is {verbosity}")
        self.handler.setLevel(verbosity)

        sig_handler = scarab.SignalHandler()

        # Prior to v4.8.0, service configuration information was nested within the `runtime-config` block
        # This deprecates that usage and moves everything within `runtime-config` to the top level of the configuration
        if 'runtime-config' in this_config_param:
            logger.warning('The configuration uses the deprecated \'runtime-config\' structure.  This usage is deprecated and will be removed in a future version.')
            logger.warning('Please update your configuration file by moving everything within \'runtime-config\' to the top level of your configuration.')
            runtime_config = this_config_param.remove('runtime-config')
            this_config_param.merge(runtime_config)

        logger.debug(f'Serve (Python) got this primary config:\n{this_config_param}')

        # Convert config to a dict
        this_config = this_config_param.to_python()

        # Create the service and register it with the signal handler
        the_service = self.create_object( this_config, 'Service', this_auth )
        sig_handler.add_cancelable(the_service)
        logger.info(f'Service {the_service.name} has been built')

        # Run the service
        the_service.run()

if __name__ == '__main__':
    # App object
    the_main = scarab.MainApp()

    # Default configuration for a Service
    the_main.default_config = dripline.core.ServiceConfig()
    # We want scheduling to be on
    the_main.default_config.add('enable_scheduling', scarab.ParamValue(True))

    # Add the default dripline authentication specification and CL options
    dripline.core.add_dripline_options(the_main)
    dripline.core.add_service_options(the_main)

    # Add the default implementation-specific authentication specifications and CL options
    dripline.implementations.add_postgres_auth_spec(the_main)
    #dripline.implementations.add_postgres_options(the_main) #to use if this gets implemented

    # Package version information
    the_main.set_version(dripline.core.get_version( "dripline-python" ))

    # Create the Serve object
    the_server = Serve()

    # Callback function that will run everything
    the_main.set_callback(lambda : the_server.run(the_main))

    # Execute the callback (done via CLI11_PARSE)
    import sys
    the_main.execute(sys.argv)

    sys.exit(the_server.return_code)
